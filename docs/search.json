[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SGSSS Data Visualisation Workshop",
    "section": "",
    "text": "Overview\nIn addition to benefiting reproducibility and transparency, one of the advantages of using R is that researchers have a much larger range of fully customisable data visualisations options. These options not only look attractive, but can increase transparency about the distribution of the underlying data rather than relying on commonly used visualisations of aggregations such as bar charts of means.\nIn this tutorial, we provide a practical introduction to data visualisation using R and RStudio, specifically aimed at researchers who have little to no prior experience of using R. First, we provide a brief overview of general data visualisation principles and the ggplot2 package for data visualisation. The workshop then walks you through three different types of plots: bar charts, scatterplots, and. violin-boxplots (with lineplots as a bonus extra)."
  },
  {
    "objectID": "instructions.html#sec-setup",
    "href": "instructions.html#sec-setup",
    "title": "1  How to Use this Book",
    "section": "\n1.1 Setup",
    "text": "1.1 Setup\n\n1.1.1 Install booktem\n# install.packages(\"devtools\")\ndevtools::install_github(\"debruine/booktem\")\n\n1.1.2 Quarto Options\nThe file _quarto.yml contains various options that you can set to change the format and look of your book.\n\n1.1.2.1 Language Options\nThere is some default text for things like the “authors” list and “table of contents” that might need translations. Set the lang key to the 2-letter language code for your language.\nYou can make a custom translation by translating the values in the include/_language.yml file.\nlang: en\n# language: include/_language.yml\n\n1.1.2.2 Project Options\nThe project key defines the inputs and outputs for the book (quarto reference).\n\n\n\n\n\n\nproject key\n\n\n\n\n\nproject:\n  type: book\n  output-dir: docs\n  resources: resources \n\n\n\nThe output-dir key defines the directory where the rendered web files will be saved. This is set to docs in order to be compatible with GitHub Pages, but you can change this if you are working with a different repository that expects the web files to be in a different directory.\nThe resources key specifies a directory that is copied verbatim to the output directory. This is where you should put, for example, data files that you want to make accessible online (sometimes they don’t automatically copy over when linked).\n\n1.1.2.3 Book Options\nThe book key defines options that affect the look and function of the book (quarto reference).\n\n\n\n\n\n\nbook key\n\n\n\n\n\nbook:\n  title: Book\n  subtitle: ~\n  author: ~\n  doi: ~\n  license: CC-BY 4.0\n  description: ~\n  cover-image: images/logos/logo.png\n  image: images/logos/logo.png\n  favicon: images/logos/logo.png\n  cookie-consent: false\n  google-analytics: ~\n  page-navigation: true\n  search: true\n  # comments:\n  #   hypothesis:\n  #     theme: clean\n  #     openSidebar: false\n  downloads: ~\n  sharing: ~\n  sidebar:\n    title: ~\n    logo: ~\n    search: true\n    contents: ~\n    style: floating\n    background: ~\n    foreground: ~\n    border: true\n    alignment: left\n    collapse-level: 3\n    pinned: true\n    header: \"\"\n    footer: \"\"\n  margin-header: ~\n  page-footer:\n    left: ~\n    right: ~\n  chapters:\n  - index.qmd\n  - instructions.qmd\n  appendices:\n  - references.qmd\n\n\n\n\n1.1.2.4 html Options\nThe format key defines options for specific formats, such as html or pdf. We’ll only be using html here (quarto reference).\n\n\n\n\n\n\nformat:html key\n\n\n\n\n\nformat:\n  html:\n    theme:\n      light:\n      - flatly\n      - include/light.scss\n      dark:\n      - darkly\n      - include/dark.scss\n    css:\n    - https://use.fontawesome.com/releases/v5.13.0/css/all.css\n    - include/booktem.css\n    - include/glossary.css\n    - include/style.css\n    df-print: kable\n    code-link: true\n    code-fold: false\n    code-line-numbers: true\n    code-overflow: wrap\n    code-copy: hover\n    highlight-style: a11y\n    mainfont: ~\n    monofont: ~\n    include-after-body: [include/script.js]\n\n\n\n\n1.1.3 Crossrefs\nSection links must start with sec- and look like this: Section 1.1.5.\n## Section Title {#sec-section-title}\n\nInternal links look like this: @sec-section-title\nFigure links must start with fig- and look like this: Figure 1.1.\n\n\n\n\nFigure 1.1: A histogram of a Poisson distribution with lambda = 3\n\n\n\nTable links must start with tbl- and look like this: Table 1.1.\n\n\n\n\n\nTable 1.1: The authors of this book\n\nfirst_name\nlast_name\n\n\n\nLisa\nDeBruine\n\n\nDaniël\nLakens\n\n\n\n\n\n\n\nSee the quarto documentation for more information.\n\n1.1.4 References\nZotero export - keep updated\n\n1.1.5 Snippets\nSnippets in RStudio provide shortcuts to syntax. For example, in an RMarkdown document, type “r” and shift-tab to expand a code chunk.\nYou can add your own snippets. Under the Tools menu, choose Edit Code Snippets... and paste the following text into the end of the appropriate sections.\n\n1.1.5.1 Markdown\nsnippet gls\n    r glossary(\"${1:term}\")\n    \nsnippet gls2\n    r glossary(\"${1:term}\", \"${2:display}\")\n    \nsnippet h1\n    # ${1:title} {#sec-${2:ref}}\n    \nsnippet h2\n    ## ${1:title} {#sec-${2:ref}}\n    \nsnippet h3\n    ### ${1:title} {#sec-${2:ref}}\n    \nsnippet h4\n    #### ${1:title} {#sec-${2:ref}}\n    \nsnippet h5\n    ##### ${1:title} {#sec-${2:ref}}\n\n1.1.6 Customize\n\n1.1.6.1 Page Footer\nThe default footer includes license YEAR, author, and github and twitter icons, but you can customize this in the _quarto.yml file under page-footer:. See the quarto documentation for more options. See the available icons at https://icons.getbootstrap.com/."
  },
  {
    "objectID": "instructions.html#sec-layout",
    "href": "instructions.html#sec-layout",
    "title": "1  How to Use this Book",
    "section": "\n1.2 Layout",
    "text": "1.2 Layout\n\n1.2.1 Conventions\nThis book will use the following conventions:\n\nCode: list(number = 1, letter = \"A\")\n\nFile paths: data/sales.csv\n\nMenu/interface options: Tools &gt; Global Options… &gt; Pane Layout\n\nR Packages: tidyverse\n\nGlossary items: alphaThe threshold chosen in Neyman-Pearson hypothesis testing to distinguish test results that lead to the decision to reject the null hypothesis, or not, based on the desired upper bound of the Type 1 error rate. An alpha level of 5% it most commonly used, but other alpha levels can be used as long as they are determined and preregistered by the researcher before the data is analyzed.\n\nCitations: Wickham et al. (2022)\n\nInternal links: Section 1.2.1\n\nExternal links: Mastering Shiny\n\nMac-specific: Cmd-Shift-F10\n\nWindows-specific: Ctl-Shift-F10\n\n\nA list of mac and windows keyboard shortcuts.\n\n1.2.2 Figures\nIt is best practice to set a custom ggplot theme, then each subsequent plot will use that theme. You can put this code in R/my_setup.R after loading ggplot2.\nStart with a built-in theme and then add any tweaks with the theme() function.\n\nlibrary(ggplot2)\n\nmy_theme &lt;- theme_minimal(base_size = 16) + \n            theme(panel.background = element_rect(fill = \"red\", \n                                                  color = \"black\", \n                                                  size = 5),\n                  panel.grid = element_blank())\n\nWarning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\ntheme_set(my_theme)\n\n\nggplot(midwest, aes(popdensity, percollege)) +\n  geom_point(alpha = 0.5) +\n  labs(x = \"Population Density\", y = \"Percent College Educated\")\n\n\n\nFigure 1.2: Demographic information of midwest counties from 2000 US census\n\n\n\n\n1.2.3 Tables\n\nhead(beaver1)\n\n\n\nBeavers \n\nday\ntime\ntemp\nactiv\n\n\n\n346\n840\n36.33\n0\n\n\n346\n850\n36.34\n0\n\n\n346\n900\n36.35\n0\n\n\n346\n910\n36.42\n0\n\n\n346\n920\n36.55\n0\n\n\n346\n930\n36.69\n0\n\n\n\n\n\n\n\n1.2.4 Callout boxes\nSee the quarto reference for more options.]{.aside}\n\n\n\n\n\n\nNote\n\n\n\n.callout-note: Informational asides.\n\n\n\n\n\n\n\n\nClick to expand\n\n\n\n\n\ncolapse = “true”: Expanded!\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n.callout-tip: Tips\n\n\n\n\n\n\n\n\nWarning\n\n\n\n.callout-warning: Notes to warn you about something.\n\n\n\n\n\n\n\n\nCaution\n\n\n\n.callout-caution: Notes about things that could cause serious errors.\n\n\n\n\n\n\n\n\nImportant\n\n\n\n.callout-important: Notes about things that are important.\n\n\n\n1.2.5 Code and Output\n\n# code chunks\npaste(\"Code\", \"Output\", 1, sep = \" \")\n\n[1] \"Code Output 1\"\n\n\n\n\n\nFilename or header\n\n# code chunks with filename\na &lt;- 1\n\n\n\n\n```{r, fig.width = 2, fig.height = 2}\n# code chunks with visible headers\nhist(rnorm(100000))\n```\n\n\n## Markdown Example\n\n* Inline code: `r nrow(iris)`\n* *Italics*\n* **Bold**\n* [Linked text](https://psyteachr.github.io)\n\n1.2.6 Fonts"
  },
  {
    "objectID": "instructions.html#sec-extras",
    "href": "instructions.html#sec-extras",
    "title": "1  How to Use this Book",
    "section": "\n1.3 Extras",
    "text": "1.3 Extras\n\n1.3.1 Glossary\nBooks are set up with lightweight glossary functions from the glossary package.\n\n# code in R/my_setup.R to initialise the glossary on each page\nlibrary(glossary)\nglossary_path(\"include/glossary.yml\")\nglossary_popup(\"click\") # \"click\", \"hover\" or \"none\"\n\nEdit the file glossary.yml with your glossary terms like this:\nalpha: |\n  The threshold chosen in Neyman-Pearson hypothesis testing to distinguish test results that lead to the decision to reject the null hypothesis, or not, based on the desired upper bound of the Type 1 error rate. An alpha level of 5% it most commonly used, but other alpha levels can be used as long as they are determined and preregistered by the researcher before the data is analyzed.\np-value: |\n  The probability of the observed data, or more extreme data, if the null hypothesis is true. The lower the p-value, the higher the test statistic, and less likely it is to observe the data if the null hypothesis is true.\nLook up a term from the glossary file with glossary(\"alpha\"): alphaThe threshold chosen in Neyman-Pearson hypothesis testing to distinguish test results that lead to the decision to reject the null hypothesis, or not, based on the desired upper bound of the Type 1 error rate. An alpha level of 5% it most commonly used, but other alpha levels can be used as long as they are determined and preregistered by the researcher before the data is analyzed.\nDisplay a different value for the term with glossary(\"alpha\", \"$\\\\alpha$\"): \\(\\alpha\\)The threshold chosen in Neyman-Pearson hypothesis testing to distinguish test results that lead to the decision to reject the null hypothesis, or not, based on the desired upper bound of the Type 1 error rate. An alpha level of 5% it most commonly used, but other alpha levels can be used as long as they are determined and preregistered by the researcher before the data is analyzed.\nUse an inline definition instead of the glossary file with glossary(\"beta\", def = \"The second letter of the Greek alphabet\"): betaThe second letter of the Greek alphabet\nJust show the definition with glossary(\"p-value\", show = \"def\"): The probability of the observed data, or more extreme data, if the null hypothesis is true. The lower the p-value, the higher the test statistic, and less likely it is to observe the data if the null hypothesis is true.\nShow the table of terms defined on this page with glossary_table():\n\n\n\n\nterm\ndefinition\n\n\n\nalpha\nThe threshold chosen in Neyman-Pearson hypothesis testing to distinguish test results that lead to the decision to reject the null hypothesis, or not, based on the desired upper bound of the Type 1 error rate. An alpha level of 5% it most commonly used, but other alpha levels can be used as long as they are determined and preregistered by the researcher before the data is analyzed.\n\n\nbeta\nThe second letter of the Greek alphabet\n\n\np-value\nThe probability of the observed data, or more extreme data, if the null hypothesis is true. The lower the p-value, the higher the test statistic, and less likely it is to observe the data if the null hypothesis is true.\n\n\n\n\n\n\n1.3.2 FontAwesome\nThe fontAwesome quarto extension allows you to use the free icons with syntax like:\n{{&lt; fa dragon &gt;}}\n{{&lt; fa brands github size = 5x title=\"(github logo)\" &gt;}}\nTo install it, just run this code in the Terminal pane of RStudio (not the Console pane).\nquarto install extension quarto-ext/fontawesome\n\n\n\n\nWickham, H., Bryan, J., & Barrett, M. (2022). Usethis: Automate package and project setup. https://CRAN.R-project.org/package=usethis"
  },
  {
    "objectID": "webexercises.html#example-questions",
    "href": "webexercises.html#example-questions",
    "title": "Appendix A — Webexercises",
    "section": "\nA.1 Example Questions",
    "text": "A.1 Example Questions\n\nA.1.1 Fill-In-The-Blanks (fitb())\nCreate fill-in-the-blank questions using fitb(), providing the answer as the first argument.\n\n2 + 2 is \n\n\nYou can also create these questions dynamically, using variables from your R session.\n\nThe square root of 4 is: \n\n\nThe blanks are case-sensitive; if you don’t care about case, use the argument ignore_case = TRUE.\n\nWhat is the letter after D? \n\n\nIf you want to ignore differences in whitespace use, use the argument ignore_ws = TRUE (which is the default) and include spaces in your answer anywhere they could be acceptable.\n\nHow do you load the tidyverse package? \n\n\nYou can set more than one possible correct answer by setting the answers as a vector.\n\nType a vowel: \n\n\nYou can use regular expressions to test answers against more complex rules.\n\nType any 3 letters: \n\n\nA.1.2 Multiple Choice (mcq())\n\n“Never gonna give you up, never gonna: \nlet you go\nturn you down\nrun away\nlet you down”\n“I \nbless the rains\nguess it rains\nsense the rain down in Africa” -Toto\n\nA.1.3 True or False (torf())\n\nTrue or False? You can permute values in a vector using sample(). \nTRUE\nFALSE\n\n\nA.1.4 Longer MCQs (longmcq())\nWhen your answers are very long, sometimes a drop-down select box gets formatted oddly. You can use longmcq() to deal with this. Since the answers are long, It’s probably best to set up the options inside an R chunk with echo=FALSE.\nWhat is a p-value?\n\nthe probability that the null hypothesis is truethe probability of the observed, or more extreme, data, under the assumption that the null-hypothesis is truethe probability of making an error in your conclusion\n\nWhat is true about a 95% confidence interval of the mean?\n\nthere is a 95% probability that the true mean lies within this range95% of the data fall within this rangeif you repeated the process many times, 95% of intervals calculated in this way contain the true mean"
  },
  {
    "objectID": "webexercises.html#checked-sections",
    "href": "webexercises.html#checked-sections",
    "title": "Appendix A — Webexercises",
    "section": "\nA.2 Checked sections",
    "text": "A.2 Checked sections\nCreate sections with the class webex-check to add a button that hides feedback until it is pressed. Add the class webex-box to draw a box around the section (or use your own styles).\n\nI am going to learn a lot: \nTRUE\nFALSE\n\nWhat is a p-value?\n\nthe probability that the null hypothesis is truethe probability of the observed, or more extreme, data, under the assumption that the null-hypothesis is truethe probability of making an error in your conclusion"
  },
  {
    "objectID": "webexercises.html#hidden-solutions-and-hints",
    "href": "webexercises.html#hidden-solutions-and-hints",
    "title": "Appendix A — Webexercises",
    "section": "\nA.3 Hidden solutions and hints",
    "text": "A.3 Hidden solutions and hints\nYou can fence off a solution area that will be hidden behind a button using hide() before the solution and unhide() after, each as inline R code. Pass the text you want to appear on the button to the hide() function.\nIf the solution is a code chunk, instead of using hide() and unhide(), simply set the webex.hide chunk option to TRUE, or set it to the string you wish to display on the button.\nRecreate the scatterplot below, using the built-in cars dataset.\n\n\n\n\n\n\n\n\n\n\nI need a hint\n\nSee the documentation for plot() (?plot)\n\n\n\n\n\nClick here to see the solution\n\nplot(cars$speed, cars$dist)"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Wickham, H., Bryan, J., & Barrett, M. (2022). Usethis: Automate\npackage and project setup. https://CRAN.R-project.org/package=usethis"
  },
  {
    "objectID": "01-ch1-introduction.html#data-visualisation-principles",
    "href": "01-ch1-introduction.html#data-visualisation-principles",
    "title": "\n1  Data visualisation principles and workshop preparation\n",
    "section": "\n1.1 Data visualisation principles",
    "text": "1.1 Data visualisation principles\nBefore we explore the practical side of R, we want to cover some principles behind effective data visualisation. Its useful to think about where and for whom graphs are useful. Graphs help across all research stages, from understanding your data in exploratory data analysis, to communicating your key message to your readers. However, while effective data visualisation can help to communicate your findings, it is easy to confuse or potentially mislead your readers through poorly designed graphs. These skills take time to develop and there may not always be a general rule to follow, so it is important to recognise your role as the analyst as you will always have decisions to make.\n\n1.1.1 Graphs for you\nEven if you never show a graph to your reader, exploratory data analysis is a crucial step of any research project. As you move from reading to cleaning to modelling your data, quickly making plots can help you to understand any underlying patterns. If you solely rely on statistical summaries, you may not notice these patterns.\nOne famous example is called Anscombe’s quartet where four variable pairs have the same statistical summary (a correlation of r = .82) but come from very different underlying patterns. The plot grid below demonstrates a scatterplot of all four pairs where you can see the line of best fit is identical. If you only relied on the correlation, you would not recognise a linear relationship is only appropriate for the first pair.\nIn our demonstrations, we will cover different customisation options, but you can create quick plots like these in only two or three lines of code to form a key part of your data analysis toolkit.\n\n\n\n\n\n\n\n\n\n1.1.2 Graphs for your reader\nWhen it is time to create visualisations for the benefit of your reader, graphs are capable of communicating your message faster and more effectively than any written summary. It is important though to balance efficiency with transparency about the underlying data. As we saw with Anscombe’s quartet, simple summaries can mask more complicated problems.\nFor example, you will often see bar plots in journal articles to show the difference between groups or conditions. Bar plots are great for displaying frequencies but when they are used to represent continuous data they can hide important details about the underlying data (see Weissgerber et al., 2015). The graphs below show a regular bar plot and then with the data superimposed. In the left plot (A), the two patterns of data look almost identical, but in the right plot (B), you can see they come from very different underlying distributions.\n\n\n\n\n\n\n\n\nYour role as the data analyst is key here as what might be important in one type of plot or for one audience might be different in another context. It will be down to you to choose the type of plot you think is best suited to the data you are working with and the design features you choose to emphasise such as the underlying data or the comparisons you want your readers to focus on.\nIn the following sections, we provide a brief overview of different kinds of principles and design features to keep in mind before we introduce you to creating different plots in R later in the workshop. We could easily spend the whole workshop covering good and bad plot design, so we recommend chapter one - looking at data - from Data Visualisation by Healy (2018) and the comprehensive journal article The Science of Visual Data Communication: What Works by Franconeri et al. (2021) for further reading.\n\n1.1.3 Common visual illusions\nYour visual system is pretty powerful and allows you to rapidly search for patterns in visual information. But for the same reasons that make graphs effective at communicating information, design features can also play tricks on the visual system and create illusions. Franconeri et al. organise illusions into different graph features including position, length, area, angle, and intensity. For the purposes of our demonstration and the graphs we will use, we will focus on two problems: y-axis truncation and choice of colour combinations.\n\n1.1.3.1 Y-axis truncation\nOne of the most powerful and most common illusions that can mislead people is truncated or non-zero axes, where (typically) the y-axis is shortened to zoom in on a smaller range of values. Franconeri et al. (2021) discuss studies that show people overestimate differences between two groups when you tell them the truncation is present and even if you get people to manually enter the values from each bar. For example, the bar plot below shows the same difference across the full 0 to 100 scale (A), then truncated between 45 and 60 to highlight the difference (B).\n\n\n\n\n\n\n\n\nThis is another area where it takes time and experience to recognise where y-axis trunctation is misleading or not. Although we are not trying to turn this into a bar plot witch hunt, as a general rule of thumb, its usually not a good idea to truncate the y-axis of a bar plot as they are meant to display frequencies with a logical zero point. On the other hand, its acceptable to truncate line plots (chapter 6) as they are designed to show changes across time. For further information on the nuances, see Correll et al. (2020) who discuss when y-axis truncation can be honest or deceptive.\n\n1.1.3.2 Colour-vision impairments\nOne important design feature is how you will distinguish between different elements of your graph. Colour can be used to effectively code different groups or conditions, but many analysts do not think carefully about colour combinations. Colour-vision impairments affect a significant number of people, so it is important to consider whether someone who is colour blind could distinguish between groups/conditions and understand the message you are trying to communicate. In the plot below, on the top (A) is a scatterplot using green and purple, which can look identical for some types of colourblindness. On the bottom (B) is the same scatterplot using a colour blind friendly palette of greens.\nFortunately, it is easy to choose colour blind friendly combinations as the R package we will be using comes with different palette options designed to be easier to read with colourblindness and that you can print in greyscale. We will demonstrate how you can do this in chapter three.\n\n\n\n\n\n\n\n\n\n1.1.4 Highlight comparisons of interest\nWhen we move to creating graphs with multiple variables in chapters 4 and 5, you will have control over which variable you place on the x-axis and which you place on the legend. It is important to think about which comparison you want your readers to make. Comparing features is a serial process which takes time and working memory, so your readers eyes must move between the different components and consider which are higher or lower as they move around the graph. This means you should make it easier for your readers to make the key comparisons by using connectivity and proximity.\nIn the graph below, there are two ways of presenting the same data. In plot A, condition is on the x-axis while language is a grouping variable. In plot B, these are flipped with language on the x-axis and condition as a grouping variable. When creating this plot, you would need to consider whether you want to draw people’s attention to the comparison between language groups or between the word/non-word conditions.\nIf you wanted to emphasise the difference between conditions, then plot A forces people to shift their attention back and forth between non-word and word conditions across the whole plot. Compare this to plot B where the two conditions are placed side by side. In this version, it is much easier to compare the two conditions as they are proximal to each other. If you wanted to emphasise language, then the opposite would apply with plot A having language proximal to each other.\n\n\n\n\n\n\n\n\n\n1.1.5 Integrate relevant text\nAlthough we just demonstrated the use of a legend to help label grouping variables, these can also take up working memory when there are many labels to remember. If you only have a colour or shape to identify different bars or lines, then your reader might forget what they represent. The reader must keep cross-referencing the legend with the plot, adding to the working memory load of the comparisons you want them to make.\nBelow, we use a legend to plot the age group for the rate of Danish people fully vaccinated for COVID-19 over time, but we could also directly label the lines. We will demonstrate how to create the plot in chapter 6. In plot A, the lines are labelled by colour in the legend, but we must keep cross-referencing which colour relates to each age group. Particularly as the 80+ group is the top line but the bottom entry in the legend, you must keep cross-referencing the legend with the lines. Alternatively, in plot B we removed the legend and directly labelled the age groups instead for proximity of information. For added connectivity, the colour of the labels are also the same as the lines.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKeep in mind integrating text is not always possible and it will be your decision to judge whether it is more informative to use a legend or directly add labels. If there are many overlapping lines or points, adding annotations may make your plot more crowded and harder to read than including a legend. As you will see in chapter 6, for this demonstration we removed some of the younger age groups as they overlapped at the end date, making it difficult to add informative annotations. This means annotations were informative for the restricted data but a legend might have been better for the full data. This is all part of the process of deciding what works best for your project.\n\n1.1.6 Use formats familiar to your audience\nSome plot types are ubiquitous like bar and line plots. Regardless of your discipline, everyone knows how to read and interpret these plots. Data visualisations require the reader to have existing knowledge or schemas for how they expect data to be presented. When the reader knows how to interpret the plot type, they can focus on the message you are trying to communicate.\nOn the other hand, if your reader is unfamiliar to the data visualisation format, they must first learn how to interpret your plot before they can appreciate the message you are trying to communicate. On the workshop slides, there are two unusual plots reproduced from Franconeri et al. (2021). For example, in time series data, many people would expect your outcome to be on the y-axis and the change in time across the x-axis. When there are two outcomes, you can include two y-axes to show how the outcomes change across time which is relatively easy for people to understand.\nAlternatively, a more specialised version of the plot is including the two outcomes on the x- and y-axis, and each point represents the measurement date. This means you can follow the intersection between the two outcomes as a line that wiggles across the plot. The specialised plot shows the same information but the format might not be familiar to your reader, meaning they must work out how to interpret the plot before they can appreciate the message.\nAs you might have expected given our repeated warnings, your choice of plot type is a compromise between what you think best communicates your message and what will be accessible to your readers. Sometimes plots are common but ill-advised like bar plots. They should not be used for continuous outcomes as we will demonstrate in chapter 5, but they are so ubiquitous that some audiences might still want them. This means it will be your judgment call on whether you use a less familiar visualisation format but feel it best communicates your data and message.\n\n1.1.7 Guide viewers to your conceptual message\nFor our final point, like choosing visualisation formats familiar to your reader, it is also important to respect associations between visualisation designs and data types. When interpreting plots, people rely on schemas to interpret the information they are presented. These associations are relatively universal like top vs bottom for the position (closer to the top means a greater value) and light vs dark for luminescence (darker colours on a light background means a greater value). Similarly, plot types are designed to work with certain combinations of data, like a bar plot uses categorical variables for bars and the bar height shows frequencies or your outcome. When you go against these schemas, it can be deeply confusing for your reader.\nOn the workshop slides, we included a famous example that was meant to be a clever design trick, showing the number of gun deaths in Florida around the “Stand Your Ground” law enactment, but it plotted more deaths towards the bottom of the graph. This flips the general understanding that the bottom of the a graph means smaller, so on first glance it looks like there were fewer deaths after enacting the law rather than more.\nThis is another area where subject knowledge is important as some disciplines have their own conventions which can change over time. For example, in EEG research (Electroencephalography - where brain activity is measured with electrodes stuck to the scalp) it was conventional to plot amplitude with negative values at the top and positives values at the bottom (plot A below). This can look a little odd to those unfamiliar with EEG data and breaks conventional understanding that top means higher numbers. Over time though, this convention has changed and more studies report amplitude with positive values at the top (plot B below). This shows how conventions change over time and it is important to keep your audience in mind to make your data visualisation as accessible and intuitive as possible."
  },
  {
    "objectID": "01-ch1-introduction.html#why-use-r-for-data-visualisation",
    "href": "01-ch1-introduction.html#why-use-r-for-data-visualisation",
    "title": "\n1  Data visualisation principles and workshop preparation\n",
    "section": "\n1.2 Why use R for data visualisation?",
    "text": "1.2 Why use R for data visualisation?\nNow we have covered some principles of data visualisation, it is also important to understand why we want you to use R. Creating data visualisations by writing code (as opposed to using point-and-click software) increases the reproducibility of your work. If you write code to produce your plots, you can reuse and adapt that code in the future. Finally, using R to create data visualisations gives you control over basically every element of your plot.\nWe hope that this workshop will inspire you to start experimenting with R! In today’s session we are simply focusing on visualisation and don’t really touch on data wrangling (which is the most time-consuming part of any data analysis). The data you will encounter in the wild will be messier than what you see today - it’s perfectly acceptable to start by cleaning your data on software that you feel more comfortable with and simply reading the clean data into R for visualisation. However, we do recommend eventually moving onto doing all parts of the analysis in R for the reproducibility benefits outlined above. If you want to dip your toes into data wrangling, the PsyTeachR team have a wealth of materials for different levels of expertise freely available online: https://psyteachr.github.io/"
  },
  {
    "objectID": "01-ch1-introduction.html#preparing-for-the-workshop-a-very-short-introduction-to-r",
    "href": "01-ch1-introduction.html#preparing-for-the-workshop-a-very-short-introduction-to-r",
    "title": "\n1  Data visualisation principles and workshop preparation\n",
    "section": "\n1.3 Preparing for the workshop: A very short introduction to R",
    "text": "1.3 Preparing for the workshop: A very short introduction to R\nWe will work through key features of working with R/RStudio in the workshop, but to ensure we can make the most of the time we have together, please read through this section to install R and RStudio, make sure you have all the files you need, and learn briefly how to navigate around RStudio.\n\n1.3.1 Installing R and RStudio\nIf you don’t have R and RStudio installed, please follow the detailed instructions here: https://emilynordmann.github.io/workshop-dataviz/installing-r.html\nAlternatively, you can create a free profile for RStudio Cloud: https://rstudio.cloud/\n\n1.3.2 Download the workshop materials and data\nWe have an Open Science Framework (OSF) page where you can download all the materials for the workshop separately, so please visit this page: SGSSS Data Visualisation Workshop.\nAlternatively, you can download all the files here by downloading the .zip file.\nWe will explain file structure and working directories in the workshop, but please create a new folder somewhere on your computer for the workshop materials. The .zip file already contains the file structure you need, but make sure you extract the files first and do not try to work with the files from within the .zip file.\nYou should have the two workbook .Rmd files in the main folder. This will be your working directory. You should then have the four data files within a subfolder called Data.\n\n1.3.3 What are R and RStudio?\nR is a programming language that you will write code in and RStudio is an Integrated Development Environment (IDE), which makes working in R easier. You can use R without R Studio but we wouldn’t recommend it. RStudio serves as a text editor, file manager, spreadsheet viewer, and more. The key thing to remember is that you are actually using two pieces of software, which means that from time-to-time, both of them may have separate updates.\n\n1.3.3.1 RStudio\nBy default, RStudio is arranged with four window panes.\n\n\n\n\nThe RStudio IDE\n\n\n\nThe upper left pane is the source pane, where you view, write, and edit code from files and view data in a spreadsheet format. When you first open RStudio, this pane won’t display until we open a document or load in some data.\nThe lower left pane is the console pane, where you can type in commands and view output messages. You can write code in the console to test it out, but it won’t be saved! You need to write your code into a script in the source pane to save it.\nThe right panes have several different tabs that show you information about your code. The most used tabs in the upper right pane are the Environment tab and the Help tab. The environment tab lists some information about the objects that you have defined in your code.\nIn the lower right pane, the most used tabs are the Files tab for directory structure, the Plots tab for plots made in a script, the Packages tab for managing add-on packages, and the Viewer tab to display reports created by your scripts. You can change the location of panes and what tabs are shown under Preferences &gt; Pane Layout.\n\n1.3.4 Functions\nWhen you install R you will have access to a range of functions including options for data wrangling and statistical analysis. The functions that are included in the default installation are typically referred to as base R, and you can think of them like the default apps that come pre-loaded on your phone.\nIf you type a function into the console pane, it will run as soon as you hit enter. If you put the function in a script or R Markdown document, it won’t run until you run the code.\nFor example, the function sum() is included in base R. In the console, run the below code:\n\nsum(1,2,3)\n\n[1] 6\n\n\n\n1.3.5 Arguments\nMost functions require you to specify arguments in them. Arguments are basically you telling the function how you want it to run. As an example, look at the help documentation for the function sample() which randomly samples items from a list.\n\n?sample\n\nThe help documentation for sample() should appear in the bottom right help panel. We see that sample() takes the following form:\n\nsample(x, size, replace = FALSE, prob = NULL)\n\nIn the arguments section, there are explanations for each of the arguments. x is the list of items we want to choose from, size is the number of items we want to choose, replace is whether or not each item may be selected more than once, and prob gives the probability that each item is chosen.\nIn the details section it notes that if no values are entered for replace or prob it will use defaults of FALSE (each item can only be chosen once) and NULL (all items will have equal probability of being chosen). Because there is no default value for x or size, they must be specified otherwise the code won’t run.\nLet’s try an example and just change the required arguments to x and size to ask R to choose 5 random letters (letters is a built-in vector - a sequence of data - of the 26 lower-case Latin letters).\n\nsample(x = letters, size = 5)\n\n[1] \"s\" \"p\" \"b\" \"r\" \"v\"\n\n\n\n1.3.6 Objects\nObjects are things you create in your code, and they can contain different things such as numbers, words, results of analyses, or dataframes. A large part of your coding will involve creating and manipulating objects. You assign content to an object using &lt;-.\nRun the following code in the console:\n\ntest &lt;- \"potato\"\n\nsummed &lt;- 1+2\n\nTry to create an object called name and enter your name, and an object called age and add your age. You need quotation marks for objects made of letters (this is called characters in R), but you won’t need them for numbers.\n\n1.3.7 Packages\nPackages are add-ons which allow you to access different functions that are not included in base R. This is done using install.packages(). This is like installing an app on your phone: you only have to do it once and the app will remain installed until you remove it. Once you launch the app, it will run in the background until you close it or restart your phone. Likewise, when you install a package, the package will be available (but not loaded) every time you open up R.\nThis tutorial will require you to use the ggplot2 package, which is a part of the tidyverse collection. To install it, copy and paste the below code into the console (the bottom left hand pane) and press enter to execute the code.\n\n# type this in the console pane, never in a script or an R Markdown (.Rmd) file!\ninstall.packages(\"tidyverse\")\n\nYou should always install packages in the console and never in a script - leaving this code in your script can lead you to unintentionally install a package update you didn’t want. For this reason, avoid including install code in any script or Markdown document.\nIf you have R/R Studio downloaded to your computer, you have installed the tidyverse package, and you have downloaded the workshop materials, you are all set and we look forward to seeing you on the day!"
  },
  {
    "objectID": "02-ch2-setting-up-and-ggplot2.html#projects",
    "href": "02-ch2-setting-up-and-ggplot2.html#projects",
    "title": "\n2  Setting up\n",
    "section": "\n2.1 Projects",
    "text": "2.1 Projects\nProjects are a useful way of keeping all your code, data, and output in one place. To create a new project, open RStudio and click File - New Project - New Directory - New Project. You will be prompted to give the project a name and select a location for where to store the project on your computer. Once you have done this, click Create Project. Download the simulated dataset ldt_data.csv, vaccinations data vaccinations_by_age_group.csv, and the workbook SGSSS summer school data viz workbook.Rmd from this OSF project and then move them all to this folder.\nThe files pane on the bottom right of RStudio should now display this folder and the files it contains - this is known as your working directory."
  },
  {
    "objectID": "02-ch2-setting-up-and-ggplot2.html#rmd-files",
    "href": "02-ch2-setting-up-and-ggplot2.html#rmd-files",
    "title": "\n2  Setting up\n",
    "section": "\n2.2 .Rmd files",
    "text": "2.2 .Rmd files\nWe have provided you with a pre-formatted Rmd file to use as a workbook for this workshop. You should see this in your Files pane. Click on the workbook and it will open up in your Source pane.\nIn R Markdown, anything written in a grey code chunk is assumed to be code, and anything written in the white space (between the code chunks) is regarded as normal text. You can insert a new code chunk with Ctrl + Alt + I ( or on OS X: Cmd + Option + I).\nHow to create a new Rmd file for group project and/or post workshop: File - New File - R Markdown. Name it, delete everything below line 12, and save it."
  },
  {
    "objectID": "02-ch2-setting-up-and-ggplot2.html#loading-packages",
    "href": "02-ch2-setting-up-and-ggplot2.html#loading-packages",
    "title": "\n2  Setting up\n",
    "section": "\n2.3 Loading packages",
    "text": "2.3 Loading packages\nTo load the packages that have the functions we need, use the library() function. Whilst you only need to install packages once, you need to load any packages you want to use with library() every time you start R or start a new session. Make a new code chunk, paste the following code in the area between the backticks, and run the code:\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "02-ch2-setting-up-and-ggplot2.html#loading-data",
    "href": "02-ch2-setting-up-and-ggplot2.html#loading-data",
    "title": "\n2  Setting up\n",
    "section": "\n2.4 Loading data",
    "text": "2.4 Loading data\nTo load the simulated data we use the function read_csv(). Make a new code chunk, paste the following code in it and run the code:\n\ndat &lt;- read_csv(file = \"ldt_data.csv\")\n\nThis code has created an object dat into which you have read the data from the file ldt_data.csv. This object will appear in the environment pane in the top right. Note that the name of the data file must be in quotation marks and the file extension (.csv) must also be included. If you receive the error …does not exist in current working directory it is highly likely that you have made a typo in the file name, have not included the file extension .csv, or that the data file you want to load is not stored in your project folder. If you get the error could not find function it means you have either not loaded the correct package, or you have made a typo in the function name."
  },
  {
    "objectID": "02-ch2-setting-up-and-ggplot2.html#simulated-dataset",
    "href": "02-ch2-setting-up-and-ggplot2.html#simulated-dataset",
    "title": "\n2  Setting up\n",
    "section": "\n2.5 Simulated dataset",
    "text": "2.5 Simulated dataset\nFor the purpose of this tutorial, we will use simulated data for a 2 x 2 mixed-design lexical decision task in which 100 participants must decide whether a presented word is a real word or a non-word.\n\n2.5.1 Formatting the data\nNormally data wrangling and cleaning is the most time-consuming part of doing data analysis in R. Today, we are going to give you already formatted data so we can focus on just data visualisation. Paste the below code into a new code chunk and run it to format the simulated dataset. If you want to know what each of the steps do, you can refer to the full tutorial here: https://psyteachr.github.io/introdataviz/index.html\nDepending on the type of the plot, we are either using the dat dataframe, or the dat_clean dataframe - pay attention to the code for each task!\n\ndat_clean &lt;- pivot_longer(data = dat, \n                         cols = rt_word:acc_nonword, \n                         names_sep = \"_\", \n                         names_to = c(\"dv_type\", \"condition\"),\n                         values_to = \"dv\") %&gt;%\n  pivot_wider(names_from = \"dv_type\", \n              values_from = \"dv\") %&gt;% \n  mutate(condition=as.factor(condition), language=as.factor(language))\n\ndat &lt;- mutate(dat, language=as.factor(language))\n\n\n2.5.2 Data overview\nThe dataset dat_clean has 200 rows (two rows for each participant: one for their responses to the nonword condition, and one to the word condition). We have the following columns:\n\n\nParticipant information:\n\n\nid: Participant ID\n\nage: Age\n\n\n\nTwo between-subject independent variables (IV):\n\n\nlanguage: Language group (1 = monolingual, 2 = bilingual)\n\ncondition: Word vs. non-word trials\n\n\n\nParticipants responses as the dependent variables\n\n\nrt: Reaction time (ms)\n\nacc: Accuracy"
  },
  {
    "objectID": "02-ch2-setting-up-and-ggplot2.html#ggplot2-and-the-layer-system",
    "href": "02-ch2-setting-up-and-ggplot2.html#ggplot2-and-the-layer-system",
    "title": "\n2  Setting up\n",
    "section": "\n2.6 ggplot2 and the layer system",
    "text": "2.6 ggplot2 and the layer system\nThere are multiple approaches to data visualisation in R; in this workshop we use ggplot2, which uses a layered grammar of graphics, in which plots are built up in a series of layers. It may be helpful to think about any picture as having multiple elements that sit over each other.\nImportantly, each layer is independent and independently customisable. For example, the size, colour, and position of each component can be adjusted. The use of layers makes it easy to build up complex plots step-by-step, and to adapt or extend plots from existing code. Each layer is separated by a +. We’ll try this by making a simple histogram next!"
  },
  {
    "objectID": "02-ch2-setting-up-and-ggplot2.html#histogram",
    "href": "02-ch2-setting-up-and-ggplot2.html#histogram",
    "title": "\n2  Setting up\n",
    "section": "\n2.7 Histogram",
    "text": "2.7 Histogram\nWe are going to plot the distribution of participant age in a histogram, and add layers one-by-one to demonstrate how the plot is built step-by-step.\nStep 1: This code tells R to access the ggplot function. The first argument tells R to plot the dat dataframe. In the aes function, you specify the aesthetics of the plot, such as the axes and colours. What you need to specify depends on the plot you want to make (you’ll learn more about this later) - for a basic histogram you only need to specify the x-axis (the y-axis will automatically be counts).\n\nggplot(dat, aes(x = age))\n\n\n\n\n\n\n\nStep 2: You can see that the code above produces an empty plot - that’s because we haven’t specified which type of plot we want to make. We’ll do this by adding another layer: geom_histogram(). Geom is an expression of the type of plot you want to create.\n\nggplot(dat, aes(x = age)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nStep 3: By adding a new layer we can change the axis names:\n\nggplot(dat, aes(x = age)) +\n  geom_histogram()+\n  scale_x_continuous(\"Age\")\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\nStep 4: We can also change the theme of the plot:\n\nggplot(dat, aes(x = age)) +\n  geom_histogram()+\n  scale_x_continuous(\"Age\")+\n  theme_bw()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "02-ch2-setting-up-and-ggplot2.html#density-plot",
    "href": "02-ch2-setting-up-and-ggplot2.html#density-plot",
    "title": "\n2  Setting up\n",
    "section": "\n2.8 Density plot",
    "text": "2.8 Density plot\nThe layer system makes it easy to create new types of plots by adapting existing recipes. For example, rather than creating a histogram, we can create a smoothed density plot by calling geom_density() rather than geom_histogram(). The rest of the code remains identical.\n\nggplot(dat, aes(x = age)) +\n  geom_density()+\n  scale_x_continuous(name = \"Age\")+\n  theme_bw()\n\n\n\nDensity plot of age."
  },
  {
    "objectID": "08-ch8-customisation.html#y-axis-truncation",
    "href": "08-ch8-customisation.html#y-axis-truncation",
    "title": "\n8  Code for data visualisation principles\n",
    "section": "\n8.1 Y-axis truncation",
    "text": "8.1 Y-axis truncation\nIf you want to shorten the y-axis, it is not the most intuitive of functions in ggplot. First, if we recreate the more honest version of the plot:\n\n# Behind the scenes, we simulated some values for group A and group B and saved them in data\nggplot(data, aes(x = Group, y = DV)) + \n  geom_bar(stat = \"summary\", fun.y = \"mean\") + #Normally not a good idea to calculate the mean for a bar plot, but for demonstration purposes\n  scale_y_continuous(limits = c(0, 100), # Manually set the limits\n                     breaks = seq(0, 100, 25))+ # from 0 to 100 in steps of 25\n  theme_minimal()\n\n\n\n\n\n\n\nWe know its normally not a good idea to summarise continuous data with the mean per bar, but see this as a demonstration perfect for the “bad” plot. If you want to shorten the y-axis, intuitively, you might think you could just shorten the limits:\n\n# Behind the scenes, we simulated some values for group A and group B and saved them in data\nggplot(data, aes(x = Group, y = DV)) + \n  geom_bar(stat = \"summary\", fun.y = \"mean\") + #Normally not a good idea to calculate the mean for a bar plot, but for demonstration purposes\n  scale_y_continuous(limits = c(45, 60), # Manually set the limits\n                     breaks = seq(45, 60, 5))+ # from 0 to 100 in steps of 25\n  theme_minimal()\n\n\n\n\n\n\n\nYour intuition would be wrong. Here, setting the limits will remove data outside of these limits, so you might find yourself with an empty plot as you removed so many data points.\nTo shorten the y-axis, we need an extra function called coord_cartesian (see the help page online for further details). In essence, this function allows you to zoom in on a part of the graph and it will no longer remove data points:\n\nggplot(data, aes(x = Group, y = DV)) + \n  geom_bar(stat = \"summary\", fun.y = \"mean\") + \n  coord_cartesian(ylim = c(45, 60))+\n  theme_minimal()"
  },
  {
    "objectID": "08-ch8-customisation.html#colour-vision-impairments",
    "href": "08-ch8-customisation.html#colour-vision-impairments",
    "title": "\n8  Code for data visualisation principles\n",
    "section": "\n8.2 Colour-vision impairments",
    "text": "8.2 Colour-vision impairments\nWe already demonstrated how to change colours in chapter 3, but you might want to know how to manually select colours. There are different ways of selecting colours which you could use to create a nice colour-blind friendly plot for the “good” submission, or you could select the most garish colours imaginable for the “bad” submission.\nLet’s start with sensible colours to create a colour-blind friendly plot without any input:\n\n#scatterplot using dat_clean for response time by accuracy, and label by condition\nggplot(dat_clean, aes(x = rt, y = acc, colour = condition)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  scale_colour_viridis_d(option=\"D\", # Which option from A to E? \n                         name = \"Condition\", # Name for the legend title\n                         labels = c(\"Non-Word\", \"Word\"))+ # Names for the legend conditions \n  theme_minimal()\n\n\n\n\n\n\n\nUsing the viridis colour scale, you have the option between palettes A to E. For all the options, you can look at the documentation by running ?scale_colour_viridis_d in the console, or looking at this vignette online.\nTo play around with colours, you can choose one of the other options:\n\n#scatterplot using dat_clean for response time by accuracy, and label by condition\nggplot(dat_clean, aes(x = rt, y = acc, colour = condition)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  scale_colour_viridis_d(option=\"A\", # Which option from A to E? \n                         name = \"Condition\", # Name for the legend title\n                         labels = c(\"Non-Word\", \"Word\"))+ # Names for the legend conditions \n  theme_minimal()\n\n\n\n\n\n\n\nAs a discrete scale, the function will add colours across the palette for the number of conditions. Alternatively, you can manually set where you have the colour map to begin and end. This provides a little more control over your colour combinations while still coming from a colour-blind friendly palette:\n\n#scatterplot using dat_clean for response time by accuracy, and label by condition\nggplot(dat_clean, aes(x = rt, y = acc, colour = condition)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  scale_colour_viridis_d(option=\"D\", # Which option from A to E? \n                         begin = 0.2, # Where do you want the colour map to start? \n                         end = 0.8, # Where do you want the colour map to end? \n                         name = \"Condition\", # Name for the legend title\n                         labels = c(\"Non-Word\", \"Word\"))+ # Names for the legend conditions \n  theme_minimal()\n\n\n\n\n\n\n\nIf you want full control over your colour choices (including bad choices), then you can manually select colours using HTML/CSS names or hex codes (see this online guide for names and a colour selector). For example, we can select some garish colours using specific names:\n\nggplot(dat_clean, aes(x = rt, y = acc, colour = condition)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  scale_colour_discrete(name = \"Condition\", # Name of the legend\n                        labels = c(\"Non-Word\", \"Word\"), #Name of the conditions\n                        type = c(\"red\", \"cyan\"))+ # here you can manually select colours for the number of conditions you have\n  theme_minimal()"
  },
  {
    "objectID": "08-ch8-customisation.html#highlight-comparisons-of-interest",
    "href": "08-ch8-customisation.html#highlight-comparisons-of-interest",
    "title": "\n8  Code for data visualisation principles\n",
    "section": "\n8.3 Highlight comparisons of interest",
    "text": "8.3 Highlight comparisons of interest\nWhen it comes to changing the order of comparisons, it is simple to swap the variables as we just change which variable is set to x and which is set to fill:\n\n# Condition on x, language as separate colours for the legend\nggplot(dat_clean, aes(x = condition, y= rt, fill = language)) +\n  geom_boxplot() + \n  labs(x = \"Condition\", y = \"Response Time (ms)\") + \n  scale_fill_viridis_d(option=\"B\", \n                       begin=0.65, \n                       end=0.85, \n                       name = \"Language\") + \n  scale_x_discrete(labels = c(\"Non-Word\", \"Word\"))+\n  theme_minimal()\n\n\n\n\n\n\n# language on x, condition as separate colours for the legend\nggplot(dat_clean, aes(x = language, y= rt, fill = condition)) +\n  geom_boxplot() + \n  labs(x = \"Language\", y = \"Response Time (ms)\") + \n  scale_fill_viridis_d(option=\"B\",\n                       begin=0.65, end=0.85, \n                       name = \"Condition\",\n                       labels = c(\"Non-Word\", \"Word\"))+\n  theme_minimal()\n\n\n\n\n\n\n\nHowever, it can be a little tricky to switch the order of groups/conditions within a variable. For example, if you wanted Bilingual or Word presenting first, or to order the conditions from largest to smallest. We have not covered data wrangling in this workshop, so we do not expect you to know how factors work behind the scenes in R. In short, factors tell R the names are predefined discrete groups/conditions and you can provide them with an order. So, we can edit the variable we already have to switch the order. Previously, we had non-word then word since R will order things alphabetically by default.\n\nIt is really important you change the variable order first or you might mislabel the plot. If you simply switched the labels above to labels = c(\"Word\", \"Non-Word\"), it would have changed the labels but not the underlying data.\n\nIn the code below, we first change the order of the factor, then run the same code as above to create the plot. We then switch the edited labels around in scale_fill_viridis_d to match our new variable order. Switching the variable order might be useful in future for highlighting comparisons of interest if you wanted to sort the groups by ascending or descending order, so people can see the pattern clearly, instead of scanning across the plot to compare distant bars etc.\n\n# Here, we are editing a preexisting variable, so we start with the data frame and variable to save it as the same object\n# On the right, we use the factor function to edit the same variable since we are editing it, not creating a new variable\n# In level, this is where we set the order. By default, it was nonword and word since it will use alphabetical order\n# The labels must be exactly the same as they are listed in the data or it will throw an error\n\ndat_clean$condition &lt;- factor(dat_clean$condition, \n                              levels = c(\"word\", \"nonword\")) \n\nggplot(dat_clean, aes(x = language, y= rt, fill = condition)) +\n  geom_boxplot() + \n  labs(x = \"Language\", y = \"Response Time (ms)\") + \n  scale_fill_viridis_d(option=\"B\",\n                       begin=0.65, end=0.85, \n                       name = \"Condition\",\n                       labels = c(\"Word\", \"Non-word\"))+ #switched around from the previous attempt\n  theme_minimal()"
  },
  {
    "objectID": "08-ch8-customisation.html#integrate-relevant-text",
    "href": "08-ch8-customisation.html#integrate-relevant-text",
    "title": "\n8  Code for data visualisation principles\n",
    "section": "\n8.4 Integrate relevant text",
    "text": "8.4 Integrate relevant text\nIf you want to annotate your plots, there are a few ways of doing it. Many people will create the base plot in R and then add annotations or extra design elements in additional software such as Photoshop. However, adding annotations in R with the rest of the plot means all the process is reproducible, so it is worth learning how to add even basic additions.\nThe first useful ggplot function is called annotate(). This is a flexible layer where you can select from different elements such as text, arrows, or shapes. See the online documentation for further examples and guidance.\nWe will work with the smaller version of the vaccination data we used in Chapter 1, excluding the youngest age groups. In the code below, we use the same code as the line plots in Chapter 6, but we have added an additional annotate layer to the end. For this first example, imagine we wanted to highlight a specific time period to draw people’s attention to:\n\nggplot(vaccinations, aes(x=date, y=people_fully_vaccinated_per_hundred, colour=age_group, group=age_group))+ \n  geom_point()+\n  geom_line()+\n  theme_minimal()+\n  scale_colour_viridis_d(option=\"D\")+ \n  scale_x_date(date_labels = \"%b %Y\", # %b = abbreviated month name; %Y = Year with century\n               date_breaks = \"3 months\") + \n  labs(y = \"People Fully Vaccinated Per 100\", x = \"Date\") + \n  annotate(geom = \"rect\", # What geom do we want? Text, arrow, rect? \n           xmin = as.Date(\"2021-06-01\"), # Start of region on X - awkward as we're working with dates\n           xmax = as.Date(\"2021-09-01\"), # End of region on X - awkward as we're working with dates\n           ymin = 0, # Start of region on y\n           ymax = 100, # End of region on y\n           alpha = 0.5) # Make it more transparent\n\n\n\n\n\n\n\nIn this code, we created a semi-transparent rectangle to highlight the time period between June and September 2021. In the annotate function, you select which geom you want to create, then define its properties like the size across the x- and y-axis. Note: the x-axis is slightly awkward to work with in this example as we are working with dates, so we have to specify the x width using dates.\nWe can also add another layer to add text:\n\nggplot(vaccinations, aes(x=date, y=people_fully_vaccinated_per_hundred, colour=age_group, group=age_group))+ \n  geom_point()+\n  geom_line()+\n  theme_minimal()+\n  scale_colour_viridis_d(option=\"D\")+ \n  scale_x_date(date_labels = \"%b %Y\", # %b = abbreviated month name; %Y = Year with century\n               date_breaks = \"3 months\") + \n  labs(y = \"People Fully Vaccinated Per 100\", x = \"Date\") + \n  annotate(geom = \"rect\", # What geom do we want? Text, arrow, rect? \n           xmin = as.Date(\"2021-06-01\"), # Start of region on X - awkward as we're working with dates\n           xmax = as.Date(\"2021-09-01\"), # End of region on X - awkward as we're working with dates\n           ymin = 0, # Start of region on y\n           ymax = 100, # End of region on y\n           alpha = 0.5)+ # Make it more transparent\n  annotate(geom = \"text\",\n           x = as.Date(\"2021-12-01\"),\n           y = 50,\n           label = \"Something happened \\nduring this time window...\") # add \\n to break to a new line\n\n\n\n\n\n\n\nIn the additional code, we added another annotate() layer but we needed slightly fewer arguments when creating text. We selected the x-axis location using a date again, then how high we wanted it on the y-axis. Do not worry if the annotations first appear in the wrong location, it can take a little trial and error to see where looks best. Since we defined a text option, we specify what we want to say with the label argument. If you want to create a line break for longer text, you can add \\n to your label.\nFor the plot we created in Chapter 1, we used a slightly different way of creating text as it was easier to plot multiple labels and avoid overlapping. Instead of annotate(), we used geom_text() instead. The process here was more complicated and required some data wrangling, so do not worry if this makes less sense as we did not cover it in the workshop. We have added more comments than usual, so hopefully you can see what is happening when you have time to read over the materials.\n\n# Wrangling time first - we want to create a separate little dataset so we do not have to define each element later\n# 1. Create a new object from our original vaccinations dataset\n# 2. Filter the dataset down to the last date, so we just have one set of age groups and final measurements\nage_labels &lt;- vaccinations %&gt;% \n  filter(date == as.Date(\"2022-05-06\"))\n\n# Create the exact same plot as the previous line plots\nggplot(vaccinations, aes(x=date, y=people_fully_vaccinated_per_hundred, colour=age_group, group=age_group))+ \n  geom_point()+\n  geom_line()+\n  theme_minimal()+\n  theme(legend.position = \"none\") + \n  scale_colour_viridis_d(option=\"D\")+ \n  scale_x_date(date_labels = \"%b %Y\", # %b = abbreviated month name; %Y = Year with century\n               date_breaks = \"3 months\") + \n  labs(y = \"People Fully Vaccinated Per 100\", x = \"Date\") + \n  geom_text(data = age_labels, # Take our new smaller dataset\n            aes(x = as.Date(\"2022-05-25\"), #Slightly later date, so it does not overlap with the line\n                y = people_fully_vaccinated_per_hundred, # Unique value of y for each age group\n                label = age_group), # Unique label for each age group \n            check_overlap = TRUE) # Argument that prevents text overlapping \n\n\n\n\n\n\n\nTo provide a little more explanation to the new geom_text() layer, we can use it like previous geom layers like geom_line. We can use a different data source as the main plot by defining a data frame to use. We can then use aesthetic elements to control how we plot the data.\nTo be more efficient, the wrangling at the start took the original data frame and limited it to the final date. This meant we could take the labels and y-axis heights to help us plot the labels without individually defining each age group. We selected a date slightly later than the final measurement so the text did not overlap with the lines. We used the vaccination rate to create unique values for y level with each line. Finally, we used the age group column to add the label to each line. This geom takes previous customisation options, so we have the added bonus here of matching the colour scheme. If you wanted to override the previous colour scheme, you would define the colour outside the aes argument:\n\n# Create the exact same plot as the previous line plots\nggplot(vaccinations, aes(x=date, y=people_fully_vaccinated_per_hundred, colour=age_group, group=age_group))+ \n  geom_point()+\n  geom_line()+\n  theme_minimal()+\n  theme(legend.position = \"none\") + \n  scale_colour_viridis_d(option=\"D\")+ \n  scale_x_date(date_labels = \"%b %Y\", # %b = abbreviated month name; %Y = Year with century\n               date_breaks = \"3 months\") + \n  labs(y = \"People Fully Vaccinated Per 100\", x = \"Date\") + \n  geom_text(data = age_labels, # Take our new smaller dataset\n            aes(x = as.Date(\"2022-05-25\"), #Slightly later date, so it does not overlap with the line\n                y = people_fully_vaccinated_per_hundred, # Unique value of y for each age group\n                label = age_group), # Unique label for each age group \n            check_overlap = TRUE, # Argument that prevents text overlapping \n            colour = \"black\") # Manually set the colour outside aes"
  },
  {
    "objectID": "08-ch8-customisation.html#guide-viewers-to-your-conceptual-message",
    "href": "08-ch8-customisation.html#guide-viewers-to-your-conceptual-message",
    "title": "\n8  Code for data visualisation principles\n",
    "section": "\n8.5 Guide viewers to your conceptual message",
    "text": "8.5 Guide viewers to your conceptual message\nFor this section in Chapter 1, our main message was to respect common associations such as more positive means higher values. It can be deeply confusing to people - particularly those with less subject experience - to go against these associations. The example we used was from example EEG data where, historically, amplitude measured in micro Volts was plotted with negative at the top and positive at the bottom. In ggplot, we would have to intervene to flip the y-axis. For a starting point, lets see what the plot looks like normally (and we would argue most logically):\n\n# Create a line plot for time series, grouping by condition to join the lines\nggplot(impulsivity_long, aes(x=Time_point, y=mean_mV, colour=Condition, group=Condition))+ \n  geom_point()+\n  geom_line()+\n  theme_minimal()+\n  scale_colour_viridis_d(option=\"D\", begin = 0.5, end = 0.8)+ \n  scale_x_continuous(breaks = seq(0, 1000, 200))+ \n  labs(y = \"Amplitude (\\u00B5V)\", x = \"Time (ms)\") # UTC code \\u00B5 creates the mu symbol for micro Volts\n\n\n\n\n\n\n\nSo far so good and it is pretty clear where there are waves moving in a negative or positive direction. If we wanted to flip the y-axis to make it look closer to old school EEG plots, then we only need one additional layer:\n\nggplot(impulsivity_long, aes(x=Time_point, y=mean_mV, colour=Condition, group=Condition))+ \n  geom_point()+\n  geom_line()+\n  theme_minimal()+\n  scale_colour_viridis_d(option=\"D\", begin = 0.5, end = 0.8)+ \n  scale_x_continuous(breaks = seq(0, 1000, 200))+\n  labs(y = \"Amplitude (\\u00B5V)\", x = \"Time (ms)\") + # UTC code \\u00B5 creates the mu symbol for micro Volts\n  scale_y_reverse()\n\n\n\n\n\n\n\nSometimes ggplot can be a little cryptic, but this additional layer is pretty self-explanatory. The geom is called scale_y_reverse() and does what it says on the tin."
  },
  {
    "objectID": "08-ch8-customisation.html#adding-titles-and-subtitles",
    "href": "08-ch8-customisation.html#adding-titles-and-subtitles",
    "title": "\n8  Code for data visualisation principles\n",
    "section": "\n8.6 Adding titles and subtitles",
    "text": "8.6 Adding titles and subtitles\nAs a final bonus section, you can add titles, subtitles, captions, and tags within ggplot. If you are inserting the plot into a report, its normally easier to add figure captions in the software you are using. However, if you create a standalone plot, you might want to add a title for context or add your name as the creator for the caption.\nWe have used it in previous plots to change the x and y axis names, but there is a layer called labs() where you can define any label on the plot. Here are some additional options you can add if you ever need them:\n\nggplot(impulsivity_long, aes(x=Time_point, y=mean_mV, colour=Condition, group=Condition))+ \n  geom_point()+\n  geom_line()+\n  theme_minimal()+\n  scale_colour_viridis_d(option=\"D\", begin = 0.5, end = 0.8)+ \n  scale_x_continuous(breaks = seq(0, 1000, 200))+\n  labs(y = \"Amplitude (\\u00B5V)\", x = \"Time (ms)\") + # UTC code \\u00B5 creates the mu symbol for micro Volts\n  labs(title = \"Event-Related Potential differences for \\nfailure and success conditions\", # Big title at the top\n       subtitle = \"N2 waves are stronger for failure, \\nbut P3 waves are stronger for success\", # Little subtitle at the top\n       caption = \"Made with love by James\", # Smaller caption bottom right\n       tag = \"SGSSS \\nSummer School 2023\") # Large tag top left"
  },
  {
    "objectID": "09-ch9-additional-resources.html",
    "href": "09-ch9-additional-resources.html",
    "title": "9  Additional resources",
    "section": "",
    "text": "There are a number of incredible open-access online resources that, using the skills you have developed in this tutorial, will allow you to start adapting your figures and plots to make them as informative as possible for your reader. Additionally, there are also many excellent resources that expand on some of the topics we have covered here briefly, particularly data wrangling, that can help you consolidate and expand your skill set.\nPsyTeachR\nThe psyTeachR team at the University of Glasgow School of Psychology and Neuroscience has successfully made the transition to teaching reproducible research using R across all undergraduate and postgraduate levels. Our curriculum now emphasizes essential ‘data science’ graduate skills that have been overlooked in traditional approaches to teaching, including programming skills, data visualisation, data wrangling and reproducible reports. Students learn about probability and inference through data simulation as well as by working with real datasets. These materials cover all the functions we have used in this tutorial in more depth and all have Creative Commons licences to allow their use and reuse without attribution.\n\nApplied Data Skills\nLevel 1 Data Skills\nLevel 2 Analyses\nLevel 3 Statistical Models\nMsc Fundamentals of Quantititive Analysis\nMSc Data Skills for Reproducible Research\n\nInstalling R and RStudio\n\nInstalling R - PsyTeachR\nRunning R on your own computer (walkthrough videos) - Danielle Navarro\n\nIntro to R and RStudio\n\nRStudio Essentials: Programming - Part 1 (Writing code in RStudio)\nRStudio Essentials: Programming - Part 2 (Debugging code in RStudio)\n\nR Markdown\n\nIntroduction to R Markdown\nR Markdown: The Definitive Guide\n\nData wrangling\n\nR for Data Science\nText Mining with R\n\nData visualisation\n\nR Graph Gallery\nFundamentals of Data Vizualisation\nData Vizualisation: A Practical Introduction\nLook at Data from Data Vizualization for Social Science\nGraphs in Cookbook for R\nTop 50 ggplot2 Visualizations\nR Graphics Cookbook by Winston Chang\nggplot extensions\nplotly for creating interactive graphs\nDrawing Beautiful Maps Programmatically\ngganimate\nCommon R Mistakes in Data Viz documents requests for help and common student mistakes when creating data visualisations in R\nTelling Stories with Data by Rohan Alexander is a comprehensive online book on statistical communication, programming, and modelling in R."
  },
  {
    "objectID": "03-ch3-barplots.html#bar-chart-of-counts",
    "href": "03-ch3-barplots.html#bar-chart-of-counts",
    "title": "\n3  Bar plots\n",
    "section": "\n3.1 Bar chart of counts",
    "text": "3.1 Bar chart of counts\nFor our first plot, we will make a simple bar chart of counts that shows the number of participants in each language group.\n\nggplot(data = dat, aes(x = language)) +\n  geom_bar()\n\n\n\nBar chart of counts.\n\n\n\nThe first line of code sets up the base of the plot.\n\ndata specifies which data source to use for the plot\nx specifies which variable to put on the x-axis\n\nThe second line of code adds a geom, and is connected to the base code with +. In this case, we ask for geom_bar(). Each geom has an associated default statistic. For geom_bar(), the default statistic is to count the data passed to it. This means that you do not have to specify a y variable when making a bar plot of counts; R will automatically calculate counts of the groups in that variable. In this example, it counts the number of data points that are in each category of the language variable."
  },
  {
    "objectID": "03-ch3-barplots.html#customisation-1",
    "href": "03-ch3-barplots.html#customisation-1",
    "title": "\n3  Bar plots\n",
    "section": "\n3.2 Customisation 1",
    "text": "3.2 Customisation 1\nSo far we have made basic plots with the default visual appearance. There are many ways in which you can control or customise the visual appearance of figures in R. The visual appearance of elements can be customised within a geom itself, within the aesthetic mapping, or by connecting additional layers with +. In this section, we look at the simplest and most commonly-used customisations: changing colours, adding axis labels, and adding themes.\n\n3.2.1 Changing colours\nFor our basic bar chart, you can control colours used to display the bars by setting fill (internal colour) and colour (outline colour) inside the geom function. This method changes all bars.\n\nggplot(data = dat, aes(x = language)) +\n  geom_bar(fill= \"white\",\n           colour= \"black\")\n\n\n\nBar chart of counts.\n\n\n\nTo change the colours based on a variable, you need to specify the fill argument inside the aes of your first layer (instead of the geom layer. If you want the outlines, you need to set the colour argument in the aes of the first layer.\n\nggplot(data = dat, aes(x = language, fill=language)) +\n  geom_bar()\n\n\n\nFill set by a variable\n\n\n\n\n3.2.2 Accessible colour schemes\nOne of the drawbacks of using ggplot2 for visualisation is that the default colour scheme is not colour-blind friendly, and does not display well in greyscale. You can specify exact custom colours for your plots, but one easy option is to use a custom colour palette. These take the same arguments as their default scale sister functions for updating axis names and labels, but display plots in contrasting colours that can be read by colour-blind people and that also print well in grey scale. The viridis scale functions provide a number of different colour-blind and greyscale-safe options.\n\nggplot(dat, aes(language, fill=language)) +\n  geom_bar() +\n  scale_fill_viridis_d(option=\"D\")\n\n\n\nUse the viridis palette accessibility.\n\n\n\nThe viridis palette has options for continuous (scale_fill_viridis_c) and discrete (scale_fill_viridis_d) scales, and there are different colour options from A-D. If you try and use the wrong version for the data you are working with, you will receive an error message. For example, changing the code above to scale_fill_viridis_c(option=\"D\") will produce the error message “Error: Discrete value supplied to continuous scale” as you are trying to apply a continuous colour scale to discrete data.\nYou can also manually choose the colours from within the viridis palette with the begin and end arguments (they range from 0 to 1).\n\nggplot(dat, aes(language, fill=language)) +\n  geom_bar() +\n  scale_fill_viridis_d(option=\"B\", begin=0.65, end=0.85)\n\n\n\nSetting viridis colours manually.\n\n\n\n\n3.2.3 Adding a theme\nggplot2 has a number of built-in visual themes that you can apply as an extra layer. The below code updates the x-axis and y-axis labels to the histogram, but also applies theme_minimal(). Each part of a theme can be independently customised, which may be necessary, for example, if you have journal guidelines on fonts for publication (you can find more information HERE\n\nggplot(dat, aes(language)) +\n  geom_bar(fill = \"wheat\", color = \"black\") +\n  scale_x_discrete(name = \"Number of participants\") +\n  theme_minimal()\n\n\n\nBar chart with a custom theme."
  },
  {
    "objectID": "04-ch4-scatterplots.html#grouped-scatterplots",
    "href": "04-ch4-scatterplots.html#grouped-scatterplots",
    "title": "\n4  Scatterplots\n",
    "section": "\n4.1 Grouped scatterplots",
    "text": "4.1 Grouped scatterplots\nR will always follow your instructions, even when your instructions might not be the best option for your data. This is where you as the analyst comes in to make decisions on how best to visualise the data and highlight patterns. You might notice in the scatterplot above the single regression line is negative, but there are roughly two groups of data which look positive. This is an example of something called Simpson’s paradox (see, Kievit et al., 2013) where associations for a whole population may be reserved for different sub-groups.\nTo highlight different groups and potentially uncover these patterns, scatterplots can be easily adjusted to display grouped data. For geom_point(), the grouping variable is mapped to colour rather than fill:\n\nggplot(dat_clean, aes(x = rt, y = acc, colour = condition)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n\n\n\nGrouped scatterplot of reaction time versus accuracy by condition."
  },
  {
    "objectID": "04-ch4-scatterplots.html#facets",
    "href": "04-ch4-scatterplots.html#facets",
    "title": "\n4  Scatterplots\n",
    "section": "\n4.2 Facets",
    "text": "4.2 Facets\nSo far we have produced single plots that display all the desired variables. However, there are situations in which it may be useful to create separate plots for each level of a variable. This can also help with accessibility when used instead of or in addition to group colours.\n\nRather than using colour = condition to produce different colours for each level of condition, this variable is instead passed to facet_wrap().\nSet the number of rows with nrow or the number of columns with ncol. If you don’t specify this, facet_wrap() will make a best guess.\n\n\nggplot(dat_clean, aes(x = rt, y = acc)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  facet_wrap(~condition, nrow = 2)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nFaceted scatterplot"
  },
  {
    "objectID": "04-ch4-scatterplots.html#customisation-2",
    "href": "04-ch4-scatterplots.html#customisation-2",
    "title": "\n4  Scatterplots\n",
    "section": "\n4.3 Customisation 2",
    "text": "4.3 Customisation 2\n\n4.3.1 Editing axis names and labels\nTo edit axis names and labels you can connect scale_* functions to your plot with + to add layers. These functions are part of ggplot2 and the one you use depends on which aesthetic you wish to edit (e.g., x-axis, y-axis, fill, colour) as well as the type of data it represents (discrete, continuous).\nFor the bar chart of counts, the x-axis is mapped to a discrete (categorical) variable whilst the y-axis is continuous. For each of these there is a relevant scale function with various elements that can be customised. Each axis then has its own function added as a layer to the basic plot.\n\nggplot(dat_clean, aes(x = rt, y = acc)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")+\n  scale_x_continuous(name = \"Reaction time (ms)\") +\n  scale_y_continuous(breaks = c(0,10,20,30,40,50,60,70,80,90,100), limits= c(0, 100))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nScatterplot with custom axis labels.\n\n\n\n\nname controls the overall name of the axis (note the use of quotation marks).\nbreaks controls the tick marks on the axis. Again, because there are multiple values, they are enclosed within c(). Because they are numeric and not text, they do not need quotation marks. c() is a function that you will see in many different contexts and is used to combine multiple values. In this case, the breaks we want to apply are combined within c().\nlimits controls the start and end of the axis. ggplot2 will try and guess a good range for the data, but sometimes we also need to set the limits() of our axis for the breaks to work. If you delete the limits argument above, you will see that despite setting breaks from 0, the axis tick marks will start from 80 as the smallest value is approximately 75.\n\n4.3.2 Specifying axis breaks with seq()\n\nTyping out all the values we want to display on the axis is sometimes inefficient. Instead, we can use the function seq() to specify the first and last value and the increments by which the breaks should display between these two values.\n\nggplot(dat_clean, aes(x = rt, y = acc)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")+\n  scale_x_continuous(name = \"Reaction time (ms)\") +\n  scale_y_continuous(name = \"Accuracy\", breaks = seq(70, 100, by=5), limits= c(70,100))\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "05-ch5-violin-boxplots.html#storing-plots",
    "href": "05-ch5-violin-boxplots.html#storing-plots",
    "title": "\n5  Violin-boxplots\n",
    "section": "\n5.1 Storing plots",
    "text": "5.1 Storing plots\nJust like with datasets, plots can be saved to objects. The below code saves the histograms we produced for reaction time and accuracy to objects named p1 and p2. These plots can then be viewed by calling the object name in the console.\n\np1 &lt;- ggplot(dat_clean, aes(x = rt)) +\n  geom_histogram(binwidth = 10, color = \"black\")\n\np2 &lt;- ggplot(dat_clean, aes(x = acc)) +\n  geom_histogram(binwidth = 1, color = \"black\") \n\nImportantly, layers can then be added to these saved objects. For example, the below code adds a theme to the plot saved in p1 and saves it as a new object p3. This is important because many of the examples of ggplot2 code you will find in online help forums use the p + format to build up plots but fail to explain what this means, which can be confusing to beginners.\n\np3 &lt;- p1 + theme_minimal()"
  },
  {
    "objectID": "05-ch5-violin-boxplots.html#saving-plots-as-images",
    "href": "05-ch5-violin-boxplots.html#saving-plots-as-images",
    "title": "\n5  Violin-boxplots\n",
    "section": "\n5.2 Saving plots as images",
    "text": "5.2 Saving plots as images\nIn addition to saving plots to objects for further use in R, the function ggsave() can be used to save plots as images on your hard drive. The plot will be saved to your current working directory, unless you specify an alternative location such as a folder within your current working directory.\nThe only required argument for ggsave is the file name of the image file you will create, complete with file extension (this can be “eps”, “ps”, “tex”, “pdf”, “jpeg”, “tiff”, “png”, “bmp”, “svg” or “wmf”). By default, ggsave() will save the last plot displayed. However, you can also specify a specific plot object if you have one saved.\n\nggsave(filename = \"my_plot.png\") # save last displayed plot\n\nggsave(filename = \"my_plot.png\", plot = p3) # save plot p3\n\nThe width, height and resolution of the image can all be manually adjusted. Fonts will scale with these sizes, and may look different to the preview images you see in the Viewer tab. The help documentation is useful here (type ?ggsave in the console to access the help)."
  },
  {
    "objectID": "06-ch6-lineplots.html#read-in-the-data",
    "href": "06-ch6-lineplots.html#read-in-the-data",
    "title": "\n6  Line plots\n",
    "section": "\n6.1 Read in the data",
    "text": "6.1 Read in the data\nThe code below will create a new object vaccinations and read in the datafile vaccinations_by_age_group.csv:\n\nvaccinations &lt;- read_csv(\"vaccinations_by_age_group.csv\")\n\nIn this data set, we have vaccination data from Denmark for different age groups.\n\ndate column shows the timestamps. This will be the x axis of your plot.\npeople_fully_vaccinated_per_hundred shows the data on how many people per hundred have been vaccinated on a given date (the data are cumulative).\n\n-age_group shows the age data split by age (15-17, 18-24, 25-49, 50-59, 60-69, 70-79, 80+)."
  },
  {
    "objectID": "06-ch6-lineplots.html#line-plot",
    "href": "06-ch6-lineplots.html#line-plot",
    "title": "\n6  Line plots\n",
    "section": "\n6.2 Line plot",
    "text": "6.2 Line plot\nLet’s start by making a simple line plot. For a line plot, you need to define the x and the y axes in your aes() function.\n\nggplot(vaccinations, aes(x = date, y = people_fully_vaccinated_per_hundred))+\n  geom_line()\n\n\n\n\n\n\n\n\n6.2.1 Grouping the plot\nUnless you enjoy recreating album covers from the Arctic Monkeys, you can see that this plot doesn’t make any sense. That’s because there are multiple data points for each of the dates (each of the age groups have their own entry). To make a plot that makes sense, we need to group the plot by age group. This means that the ggplot function will split the data based on the variable you specify in the group argument.\n\nggplot(vaccinations, aes(x = date, y = people_fully_vaccinated_per_hundred, group=age_group))+\n  geom_line()\n\n\n\n\n\n\n\nAlternatively, you could facet the plot, but then you won’t be able to see the trends in one plot, which is usually important for time series data.\n\nggplot(vaccinations, aes(date, people_fully_vaccinated_per_hundred))+\n  geom_line()+\n  facet_wrap(~age_group)\n\n\n\n\n\n\n\n\n6.2.2 Customising the plot\nFinally, we’ll add colour to the plot to distinguish the age groups, and we’ll add another layer with geom_point() to mark the different time points more clearly, we’ll change the theme of the plot and make it colour-blind friendly.\n\nggplot(vaccinations, aes(x=date, y=people_fully_vaccinated_per_hundred, colour=age_group, group=age_group))+\ngeom_point()+\ngeom_line()+\ntheme_minimal()+\nscale_colour_viridis_d(option=\"D\")\n\n\n\n\n\n\n\n\n6.2.3 Dealing with a date axis\nOne thing to note is that the x-axis here is with dates instead of numbers (if you look at the vaccinations dataframe, the datatype is unknown. Luckily, there are customisation options for this on ggplot! We can use the scale_x_date function as a layer to modify and work with date formats:\n\nggplot(vaccinations, aes(x=date, y=people_fully_vaccinated_per_hundred, colour=age_group, group=age_group))+ \n  geom_point()+\n  geom_line()+\n  theme_minimal()+\n  scale_colour_viridis_d(option=\"D\")+ \n  scale_x_date(date_labels = \"%b %Y\", # %b = abbreviated month name; %Y = Year with century\n               date_breaks = \"3 months\")\n\n\n\n\n\n\n\nIf you want more information on customising dates in ggplot, this blog post is very useful: https://www.r-bloggers.com/2018/06/customizing-time-and-date-scales-in-ggplot2/"
  },
  {
    "objectID": "06-ch6-lineplots.html#end-of-first-half",
    "href": "06-ch6-lineplots.html#end-of-first-half",
    "title": "\n6  Line plots\n",
    "section": "\n6.3 End of first half!",
    "text": "6.3 End of first half!\nWell done for completing the first half of the workshop! Now you should have a basic understanding of how ggplot2 works, the different plot types, and customisation options available to you. There are further resources in appendix A if you would like to expand your plotting skills.\nFor the second half of the workshop, we will do a small data visualisation group project, which you can find in chapter 7!"
  },
  {
    "objectID": "07-ch7-group-project.html",
    "href": "07-ch7-group-project.html",
    "title": "7  Group task",
    "section": "",
    "text": "Hopefully, by this point you have learnt about creating different plots in R and you could follow the instructions. For the next step in your learning, it is time to apply your new found R skills to novel data.\nFirst, arrange yourselves into groups. If we have a full room of 30 people, we recommend groups of three or four members. This should spread the expertise while not leaving people with nothing to do. If we end up with a different number, we can tweak the group sizes during the workshop.\nWe have collated three data sets - some from academic articles and others from statistics agencies - for you to choose from for a final group task. We created an OSF project to host all the data and we added a code book so you know what each variable represents. There is also a .html file in the workshop materials that include the codebook. The data sets come from a range of sources, so hopefully your group can find one you all find interesting. You will not need to use every single variable, so a key part of this task will be deciding what message you are trying to communicate and what type of plot would be best suited to the type of data you use.\nYou can find a direct link to each data set below:\n\nFarias et al. (2019) – Athetist’s and Christian’s motivations to hike a pilgrimage trail. Since we have not covered data wrangling, we have included two versions of this data set for if you want to plot all the motivation sub-scales side by side (Farias_2019_long.csv) or just choose one or two sub-scales (Farias_2019.csv).\nDawtry et al. (2015) – Perceptions of income inequality based on people’s household income, their estimated average income, how fair they perceive the current system to be, and how much they support wealth redistribution.\nRoad accidents - data from Glasgow City Council on the number of road accidents. You have also information on the day of the week each accident happened, the speed limit in the area it happened and accident severity.\n\nOnce you decide on a data set, we would like you to create two versions of a plot:\n\nOne “good” plot to transparently communicate the findings\nOne “bad” plot to misleadingly or poorly communicate the findings\n\nThe idea here is you will demonstrate what you have learnt about plotting using ggplot and the principles of visual data communication from the start of the workshop. A key part of knowing how to create effective data visualisation is understanding how it could also be presented ineffectively. For example, truncating the y-axis or using counter intuitive design elements, compared to transparently displaying the underlying distribution of continuous data and selecting colour blind friendly colour palettes.\nWhen you have finished, save your plots and have one of your group upload your good and bad examples to this padlet board.\nEveryone then has one good vote and one bad vote, so heart your favourite from each category. The good plot and the bad plot with the most votes will get a super special prize for each group! If we have plots with tie votes, Wil and James will vote as tiebreakers."
  },
  {
    "objectID": "09-ch9-additional-resources.html#psyteachr",
    "href": "09-ch9-additional-resources.html#psyteachr",
    "title": "9  Additional resources",
    "section": "9.1 PsyTeachR",
    "text": "9.1 PsyTeachR\nThe psyTeachR team at the University of Glasgow School of Psychology and Neuroscience has successfully made the transition to teaching reproducible research using R across all undergraduate and postgraduate levels. Our curriculum now emphasizes essential ‘data science’ graduate skills that have been overlooked in traditional approaches to teaching, including programming skills, data visualisation, data wrangling and reproducible reports. Students learn about probability and inference through data simulation as well as by working with real datasets. These materials cover all the functions we have used in this tutorial in more depth and all have Creative Commons licences to allow their use and reuse without attribution.\n\nApplied Data Skills\nLevel 1 Data Skills\nLevel 2 Analyses\nLevel 3 Statistical Models\nMsc Fundamentals of Quantititive Analysis\nMSc Data Skills for Reproducible Research"
  },
  {
    "objectID": "09-ch9-additional-resources.html#installing-r-and-rstudio",
    "href": "09-ch9-additional-resources.html#installing-r-and-rstudio",
    "title": "9  Additional resources",
    "section": "9.2 Installing R and RStudio",
    "text": "9.2 Installing R and RStudio\n\nInstalling R - PsyTeachR\nRunning R on your own computer (walkthrough videos) - Danielle Navarro"
  },
  {
    "objectID": "09-ch9-additional-resources.html#introduction-to-r-and-rstudio",
    "href": "09-ch9-additional-resources.html#introduction-to-r-and-rstudio",
    "title": "9  Additional resources",
    "section": "9.3 Introduction to R and RStudio",
    "text": "9.3 Introduction to R and RStudio\n\nRStudio Essentials: Programming - Part 1 (Writing code in RStudio)\nRStudio Essentials: Programming - Part 2 (Debugging code in RStudio)"
  },
  {
    "objectID": "09-ch9-additional-resources.html#introductions-to-r-markdown",
    "href": "09-ch9-additional-resources.html#introductions-to-r-markdown",
    "title": "9  Additional resources",
    "section": "9.4 Introductions to R Markdown",
    "text": "9.4 Introductions to R Markdown\n\nIntroduction to R Markdown\nR Markdown: The Definitive Guide"
  },
  {
    "objectID": "09-ch9-additional-resources.html#data-wrangling",
    "href": "09-ch9-additional-resources.html#data-wrangling",
    "title": "9  Additional resources",
    "section": "9.5 Data wrangling",
    "text": "9.5 Data wrangling\n\nR for Data Science\nText Mining with R"
  },
  {
    "objectID": "09-ch9-additional-resources.html#data-visualisation",
    "href": "09-ch9-additional-resources.html#data-visualisation",
    "title": "9  Additional resources",
    "section": "9.6 Data visualisation",
    "text": "9.6 Data visualisation\n\nR Graph Gallery\nFundamentals of Data Vizualisation\nData Vizualisation: A Practical Introduction\nLook at Data from Data Vizualization for Social Science\nGraphs in Cookbook for R\nTop 50 ggplot2 Visualizations\nR Graphics Cookbook by Winston Chang\nggplot extensions\nplotly for creating interactive graphs\nDrawing Beautiful Maps Programmatically\ngganimate\nCommon R Mistakes in Data Viz documents requests for help and common student mistakes when creating data visualisations in R\nTelling Stories with Data by Rohan Alexander is a comprehensive online book on statistical communication, programming, and modelling in R."
  },
  {
    "objectID": "09-ch9-additional-resources.html#writing-reproducible-manuscripts",
    "href": "09-ch9-additional-resources.html#writing-reproducible-manuscripts",
    "title": "9  Additional resources",
    "section": "9.7 Writing reproducible manuscripts",
    "text": "9.7 Writing reproducible manuscripts\n\nUsing papaja to create reproducible APA manuscripts James delivered a workshop on using papaja to create reproducible APA manuscripts in RStudio.\nReproducible APA manuscripts with R Markdown the original authors Aust and Barth have a comprehensive online book outlining the key features of papaja."
  }
]