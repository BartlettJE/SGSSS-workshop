{
  "hash": "798b5e5141ba95dcf8435063e69be8e7",
  "result": {
    "markdown": "#  Line plots\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\nIn this final data visualisation chapter, we will show one option for visualisation of time series data: line plots. There are many other ways of visualising data like this, such as heatmaps: https://r-graph-gallery.com/283-the-hourly-heatmap.html, or stacked area charts: https://r-graph-gallery.com/136-stacked-area-chart, which you will be able to create with ggplot2 as well.\n\nFor this chapter, instead of the simulated dataset, we will use a real dataset on covid-19 vaccinations in Denmark from Our World in Data (https://ourworldindata.org/). We have cleaned the data for the purposes of this workshop and it can be downloaded from our [workshop OSF page](https://osf.io/wv7bn/){target=\"_blank\"}. \n\nMake sure you download the data file and paste it into your project folder before trying to run the code below. \n\n## Read in the data\n\nThe code below will create a new object `vaccinations` and read in the datafile `vaccinations_by_age_group.csv`:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nvaccinations <- read_csv(\"vaccinations_by_age_group.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 497 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): location, age_group\ndbl  (1): people_fully_vaccinated_per_hundred\ndate (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nIn this data set, we have vaccination data from Denmark for different age groups. \n\n- `date` column shows the timestamps. This will be the x axis of your plot. \n\n- `people_fully_vaccinated_per_hundred` shows the data on how many people per hundred have been vaccinated on a given date (the data are cumulative).\n\n-`age_group` shows the age data split by age (15-17, 18-24, 25-49, 50-59, 60-69, 70-79, 80+). \n\n## Line plot\n\nLet's start by making a simple line plot. For a line plot, you need to define the `x` and the `y` axes in your `aes()` function.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(vaccinations, aes(x = date, y = people_fully_vaccinated_per_hundred))+\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](06-ch6-lineplots_files/figure-html/line1-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n### Grouping the plot\n\nUnless you enjoy recreating album covers from the Arctic Monkeys, you can see that this plot doesn't make any sense. That's because there are multiple data points for each of the dates (each of the age groups have their own entry). To make a plot that makes sense, we need to `group` the plot by age group. This means that the `ggplot` function will split the data based on the variable you specify in the group argument.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(vaccinations, aes(x = date, y = people_fully_vaccinated_per_hundred, group=age_group))+\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](06-ch6-lineplots_files/figure-html/line2-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nAlternatively, you could facet the plot, but then you won't be able to see the trends in one plot, which is usually important for time series data.\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(vaccinations, aes(date, people_fully_vaccinated_per_hundred))+\n  geom_line()+\n  facet_wrap(~age_group)\n```\n\n::: {.cell-output-display}\n![](06-ch6-lineplots_files/figure-html/line3-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n### Customising the plot\n\nFinally, we'll add colour to the plot to distinguish the age groups, and we'll add another layer with `geom_point()` to mark the different time points more clearly, we'll change the theme of the plot and make it colour-blind friendly.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(vaccinations, aes(x=date, y=people_fully_vaccinated_per_hundred, colour=age_group, group=age_group))+\ngeom_point()+\ngeom_line()+\ntheme_minimal()+\nscale_colour_viridis_d(option=\"D\")\n```\n\n::: {.cell-output-display}\n![](06-ch6-lineplots_files/figure-html/line4-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n### Dealing with a date axis\n\nOne thing to note is that the x-axis here is with dates instead of numbers (if you look at the `vaccinations` dataframe, the datatype is `unknown`. Luckily, there are customisation options for this on ggplot! We can use the `scale_x_date` function as a layer to modify and work with date formats:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(vaccinations, aes(x=date, y=people_fully_vaccinated_per_hundred, colour=age_group, group=age_group))+ \n  geom_point()+\n  geom_line()+\n  theme_minimal()+\n  scale_colour_viridis_d(option=\"D\")+ \n  scale_x_date(date_labels = \"%b %Y\", # %b = abbreviated month name; %Y = Year with century\n               date_breaks = \"3 months\")\n```\n\n::: {.cell-output-display}\n![](06-ch6-lineplots_files/figure-html/line5-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nIf you want more information on customising dates in ggplot, this blog post is very useful: https://www.r-bloggers.com/2018/06/customizing-time-and-date-scales-in-ggplot2/\n\n## End of first half!\n\nWell done for completing the first half of the workshop! Now you should have a basic understanding of how ggplot2 works, the different plot types, and customisation options available to you. There are further resources in appendix A if you would like to expand your plotting skills.\n\nFor the second half of the workshop, we will do a small data visualisation group project, which you can find in chapter 7!\n",
    "supporting": [
      "06-ch6-lineplots_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}